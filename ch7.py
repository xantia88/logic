
KBASE_FILE = "kbase.csv"

def clean(fileName):
    with open(fileName, "w") as file:
        file.write("{},{}\n".format("Question", "Answer"))
        print("Knowledge base file cleaned [{}]".format(fileName))

def save(fileName, question, answer):
    with open(fileName, "a") as file:
        file.write("{},{}\n".format(question, answer))

def true(value):
    return(value=="y")

def question(s):
    return("{}?\n".format(s))

def ask(s, options = ["y", "n"]):
    while(True):
        value = input(question(s)).strip().lower()
        if value not in options:
            print("Ошибка ввода", options)
        else:
            save(KBASE_FILE, s, value)
            return(value)

def text(s):
    while(True):
        value = input(question(s)).strip().lower() 
        if len(value)==0:
            print("Error")
        else:
            save(KBASE_FILE, s, value)
            break

def number(s):
    while(True):
        try:
            value = int(input(question(s))) 
            if value>0:
                save(KBASE_FILE, s, value)
                return(value)
            else:
                raise Exception(">0")
        except:
            print("Error")

def info(s):
    print(s)

def dialog():
    security()
    business()
    clients()
    employees()
    it()
    admins()

def security():
   
    info("Хотим узнать о том, как устроена функция КБ в компании и применительно к системе")   

    local = ask("В компании есть собственное подразделение, выполняющее функции кибербезопасности")
    if not true(local):
        ask("Компания привлекает стороннюю организацию для обеспечения функции кибербезопасности")
    
    policy = ask("В компании есть задокументированная политика информационной безопасности")
    if true(policy):
        ask("Политика определяет конфиденциальную информацию и требования для работы с ней")
        document()

    ask("Система хранит конфиденциальные данные")
    ask("Система обрабатывает конфиденциальные данные")

    audit = ask("В компании есть задокументированные требованиями к журналу аудита")
    if true(audit):
        ask("Требования определяют сроки хранения журнала аудита")
        ask("Требования определяют содержимое, объем и полноту данных в журнале аудита")
        ask("Ведение журнала аудита осуществляется централизовано на уровне компании")
        document()
    ask("Система осуществляет журналирования событий аудита")

    protocol = ask("В компании есть задокументированные требования к протоколу системных событий")
    if true(protocol):
        ask("Требования определяют содержимое, объем и полноту данных в протоколе системных событий")
        ask("Ведение прокола системных событий осуществляется централизовано на уровне компании")
        document()

    ask("Система осуществляет протоколирования событий безопасности")
    ask("Система осуществляет протоколирования действий пользователей")


def business():

    info("Хотим узнать насколько важна система для бизнеса")
    
    ask("Владельцем системы является бизнес подразделение компании")
    owner = ask("Владелец системы формально закреплен")
    if true(owner):
        document()
    
    calculator = ask("Есть заполненный калькулятор критичности")
    if true(calculator):
        ask("Рассчитанное значение уровня критичности системы", ["mc", "bc", "bo", "op"])
        text("Дата расчета уровня критичности")

    performance = ask("У системы есть заданные требования по производительности")
    if true(performance):
        sla()

    scalability = ask("У системы есть заданные требования по масштабируемости")
    if true(scalability):
        sla()

    tolerance = ask("У системы есть заданные требования по отказоустойчивости")
    if true(tolerance):
        sla()

    availability = ask("У системы есть заданные требования по доступности")
    if true(availability):
        sla()

    disaster = ask("У системы есть заданные требования по катастрофоустойчивости")
    if true(disaster):
        sla()

def it():
    
    info("Хотим узнать как устроена ИТ функция в компании и применительно к системе")

    access = ask("В компании есть централизованное решение по управлению доступом пользователей")
    if true(access):
        ask("Система подключена к централизованному решению по управлению доступом пользователей")
    ask("В системе реализовано локальное управление доступом пользователей")

    itsm = ask("В компании есть централизованное ITSM решение")
    if true(itsm):
        ask("Система подключена к ITSM решению")
    ask("В составе системы есть решение по обработке пользовательских тикетов")

    infrastructure = ask("В компании есть централизованное решение по инфраструктурному мониторингу")
    if true(infrastructure):
        ask("Система подключена к централизованному решению по инфраструктурному мониторингу")
    ask("В составе системы есть локальное решение по инфраструктурному мониторингу")
    
    applications = ask("В компании есть централизованное решение по прикладному мониторингу")
    if true(applications):
        ask("Система подключена к централизованному решению по прикладному мониторингу")
    ask("В составе системы есть локальное решение по прикладному мониторингу")
    
    logs = ask("В компании есть централизованное решение по сбору и анализу логов")
    if true(logs):
        ask("Система подключена к централизованному решению по сбору и анализу логов")
    ask("В составе системы есть локальное решение по сбору и анализу логов")

def document():
    approved = ask("Документ формально утвержден на уровне компании")
    if true(approved):
        text("Название и номер документа")
        text("Дата утверждения")

def sla():
    sla = ask("Целевые параметры заданы ввиде соглашения об уровне сервиса (SLA)")
    if true(sla):
        ask("Соглашение утверждено владельцем системы")
        process = ask("Выстроен регулярный процесс сравнения текущих значений параметров с целевыми")
        if true(process):
            ask("Периодичность сравнения", ["wk", "mn", "qt", "yr"])            
        document()
        
def scenarios():
    info("Хотим узнать какие операции пользователь выполняет в системе")
    ask("Пользователь добавляет данные в систему")
    ask("Пользовтаель получает данные из системы")
    ask("Пользователь изменяет данные в системе")
    ask("Пользователь удаляет данные из системы")

def admins():
    admins = ask("Сотрудники компании администрируют систему")
    if true(admins):
        ask("Администрирование осуществляет IT служба компании")
        ask("Администрирование осуществляет владелец системы")
        ask("Администрирование системы осуществляется из внутренней сети компании")
        ask("Администрирование системы осуществляется из внешней сети через интернет")
        ask("Администрирование системы осуществляется из внешней сети через выделенный канал")
        number("Сколько сотрудников администрируют системой")
        equipment()
        ask("Доступ к системе осуществляется через PAM")

def clients():
    clients = ask("У системы есть пользователи, которые не являются сотрудниками")
    if true(clients):
        scenarios()
        number("Сколько клиентов взаимодействуют с системой")
        roles()
        ask("Пользователи взаимодействуют с системой из внутренней сети компании")
        ask("Пользователи взаимодействуют с системой из внешней сети через интернет")
        ask("Пользователи взаимодействуют с системой из внешней сети через выделенный канал")
        frontend()

def employees():
    employees = ask("Сотрудники взаимодействуют с системой для выполнения бизнес задач")
    if true(employees):
        scenarios()
        number("Сколько сотрудников взаимодействуют с системой")
        roles()
        ask("Сотрудники взаимодействуют с системой из внутренней сети компании")
        ask("Сотрудники взаимодействуют с системой из внешней сети через интернет")
        ask("Пользователи взаимодействуют с системой из внешней сети через выделенный канал")
        equipment()
        frontend()

def roles():
    roles = ask("В системе реализована ролевая модель для пользователей")
    if true(roles):
        ask("Управление ролевой моделью осуществляется централизовано на уровне компании")
    else:
        privileges = ask("Управление полномочиями пользователей осуществляется локально в системе")
        if true(privileges):
            ask("Управление полномочиями осуществляется централизовано на уровне компании")

def equipment():
    equipment = ask("Для доступа к системе используется корпоративное оборудование")
    if true(equipment):
        ask("Персональный компьютер")
        ask("Ноутбук")
        ask("Смартфон")
        ask("Планшет")
    ask("Для доступа к системе используется ВАРМ")
    ask("Для доступа к системе используется личное устройство (BYOD)")

def frontend():
    mob = ask("Для пользовательского взаимодействия используется мобильное приложение")
    if true(mob):
        mobile()
        api()
    web = ask("Для пользовательского взаимодействия используется вэб приложение")
    if true(web):
        api()
    desktop = ask("Для пользовательского взаимодействия используется десктопное приложение")
    if true(desktop):
        os()
        api()
    console = ask("Для пользовательского взаимодействия используется консольное приложение")
    if true(console):
        os()
        api()
    req = ask("Пользователи могут вызывать API системы из собственных скриптов")
    if true(req):
        api()

def os():
    ask("На Windows")
    ask("На Linux")
    ask("На MacOS")

def api():
    ask("Используется API на базе REST")
    ask("Используется API на базе SOAP")
    ask("Используется API на базе RPC")

def mobile():
    ask("На платформе Google Android")
    ask("На платформе Apple iOS")

clean(KBASE_FILE)
dialog()






















