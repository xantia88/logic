% список предикатов, используемых для моделирования (общий язык)
:-discontiguous(goal/1).
:-discontiguous(name/2).
:-discontiguous(description/2).
:-discontiguous(comments/2).
:-discontiguous(horizon/2).
:-discontiguous(strategy/1).
:-discontiguous(realize/2).
:-discontiguous(task/1).
:-discontiguous(deadline/2).
:-discontiguous(task_status/2).
:-discontiguous(client/1).
:-discontiguous(client/2).
:-discontiguous(product/1).
:-discontiguous(product/2).
:-discontiguous(channel/1).
:-discontiguous(status/2).
:-discontiguous(type/2).
:-discontiguous(security/2).

% справочник статусов задачи (Р09)
task_status(1, "Запланировано").
task_status(2, "В процессе").
task_status(3, "Завершено").
task_status(4, "Отменено").

% справочник типов клиента (Р03)
client_type(1, "Физические лица").
client_type(2, "Микро и малый бизнес").
client_type(3, "Крупный и средний бизнес").
client_type(4, "Купнейшие клиенты и финансовые институты").
client_type(5, "Сотрдуники компании или компаний Группы").

% справочник статусов продукта (Р04)
product_status(1, "Используется").
product_status(2, "Создается").

% справочник типов канала (Р05)
channel_type(1, "Цифровой").
channel_type(2, "Физический").

% справочник размещения канала (Р05)
channel_location(1, "Внешний").
channel_location(2, "Внутренний").

% справочник статусов канала (Р05)
channel_status(1, "Используется").
channel_status(2, "Создается").

% Проверка корректности целей (Р01)
valid_goal(X):-
    goal(X), % должна быть определена как цель
    description(X, _), % должно быть задано описание
    horizon(X, _). % должен быть задан горизонт

% Проверка корректности стратегических задач (Р02)
valid_strategy(X):-
    strategy(X), % должна быть определена как стратегическая задача
    description(X, _), % должно быть задано описание
    horizon(X, _), % должен быть определен горизонт
    realize(X, Goal), valid_goal(Goal). % должна быть связана с валидной целью

% Проверка корректности задач и планов (Р09)
valid_task(X):-
    task(X), % должна быть определена как задача
    description(X, _), % должно быть задано описание
    deadline(X, _), % должен быть задан срок
    status(X, Status), task_status(_, Status), % должен быть определен статус из соответствующего справочника
    realize(X, Strategy), valid_strategy(Strategy). % должна быть связана с валидной стратегической задачей

% Проверка корректности клиента (Р03)
valid_client(X):-
    client(X), % должен быть определен как клиент
    description(X, _), % должно быть задано описание
    type(X, T), client_type(_, T), % должен быть определен статус из соотвествующего справочника
    count(X, C), C>0. % количество должно быть определено и значение должно быть положительным

% Проверка корректности продукта (Р04)
valid_product(X):-
    product(X), % должен быть задан как продукт
    name(X, _), % должно быть указано наименование
    description(X, _), % должно быть указано описание
    status(X, S), product_status(_, S). % должен быть указан статус из соотвествующего справочника

% Проверка корректности канала (Р05)
valid_channel(X):-
    channel(X), % должен быть задан как канал
    name(X, _), % должно быть указано наименование
    type(X, T), channel_type(_, T), % должен быть указан тип из соотвествующего справочника
    location(X, L), channel_location(_, L), % должно быть указано размещение из соотвествующего справочника
    description(X, _), % должно быть указано описание
    status(X, S), channel_status(_, S), % должен быть указан статус из соотвествующего справочника
    product(X, P), valid_product(P), % должен быть указан хотя бы один валидный продукт
    client(X, C), valid_client(C), % должен быть указан хотя бы один валидный клиент
    security(X, _). % должны быть указаны способы защиты

% Анализ цели
explain_goal(X):-
    write("Цель "), write(X), write(" "),
    (
        goal(X) -> % Если цель задана как сущность
        write(" определена"), nl, 
        validate(description, X), % Проверить, что задано описание
        validate(horizon, X),  ! % Проверить, что задан горизон
        ; write(" не определена") % Иначе сообщить об ошибке
    ).

% Анализ стратегической задачи
explain_strategy(X):-
    write("Стратегическая задача "), write(X), write(" "),
    (
        strategy(X) -> % Если стратегическая задача определена как сущность
        write(" определена"), nl, 
        validate(description, X), % Проверить, что задано описание
        validate(horizon, X), % Проверить, что задан горизонт
        (
            realize(X, G) -> % Если есть связь с целью
            explain_goal(G), ! % Перейти к анализу цели
            ; write("no goal") % Иначе сообщить об ошибке
        ), !
        ; write(" не определена") % Сообщить об ошибке
    ).

% Анализ задачи
explain_task(X):-
    write("Задача "), write(X),
    (
        task(X) -> % Если задача определена как сущность
        write(" определена"), nl, 
        validate(description, X), % Проверить, что задано описание
        validate(deadline, X),  % Проверить, что задан срок
        validate(status, X, task_status), % Проверить, что задан статус из соотвествующего справочника
        (
            realize(X, S) -> % Если задача связана со стратегической задачей
            explain_strategy(S), ! % Перейти к анализу стратегической задачи
            ; write("no strategy") % Иначе сообщить об ошибке
        ), !
        ; write(" не определена") % Сообщить об ошибке
    ).

% Анализ клиента
explain_client(X):-
    write("Клиент "), write(X),
    (
        client(X) -> % Если клиент определен как сущность
        write(" определен"), nl, 
        validate(description, X), % Проверить, что задано описание
        validate(type, X, client_type), % Проверить, что задан тип из соотвествующего справочника
        validate(count, X), % Проверить, что задано количество
        (
            count(X, C), C>0 -> % Проверить, что количество больше нуля
            !
            ; write("неверно указано количество, должно быть больше нуля") % Сообщить об ошибке
        ), !
        ; write(" не определена") % Сообщить об ошибке
    ).

% Анализ продукта
explain_product(X):-
    write("Продукт "), write(X),
    (
        product(X) -> % Если продукт определен как сущность
        write(" определен"), nl, 
        validate(name, X), % Проверить, что задано наименование
        validate(description, X), % Проверить, что задано описание
        validate(status, X, product_status), ! % Проверить, что задан статус из соотвествующего справочника
        ; write(" не определен") % Сообщить об ошибке
    ).

% Анализ канала
explain_channel(X):-
    write("Канал "), write(X),
    (
        channel(X) -> % Если клиент определен как сущность
        write(" определен"), nl, 
        validate(name, X), % Проверить, что задано наименование
        validate(description, X), % Проверить, что задано описание
        validate(type, X, channel_type), % Проверить, что задан тип из соотвествующего справочника
        validate(location, X, channel_location), % Проверить, что размещение задано из соотвествующего справочника
        validate(status, X, channel_status), % Проверить, что статус задан из соотвествующего справочника
        validate(security, X), %Проверить, что заданы средства защиты 
        (
            client(X, _) -> % Если указаны обслуживаемые клиенты
            client(X, C), explain_client(C) % Перейти к анализу обслуживаемых клиентов
            ; write("Ошибка: не указаны обслуживаемые клиенты"), nl % Сообщить об ошибке
        ),
        (
            product(X, _) -> % Если указаны поставляемые продукты
            product(X, P), explain_product(P) % Перейти к анализу поставляемых продуктов
            ; write("Ошибка: не указаны поставляемые продукты"), nl % Сообщить об ошибке
        )
        ; write(" не определен") % Сообщить об ошибке
    ).

